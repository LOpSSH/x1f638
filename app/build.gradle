apply plugin: 'com.android.application'
apply plugin: 'com.android.databinding'
apply plugin: 'jacoco'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "io.github.rockerhieu.x1f638"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def coverageSourceDirs = [
    'src/main/java',
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            includes: [
                    'io/github/rockerhieu/x1f638/**/*.class'
            ],
            excludes: [
                    '**/R*.class',
                    '**/BuildConfig.class',
                    '**/BR.class',
                    '**/*$InjectAdapter.class',
                    '**/*$ModuleAdapter.class',
                    '**/*$ViewInjector*.class',
                    'io/github/rockerhieu/x1f638/databinding/**.class',
                    'io/github/rockerhieu/x1f638/MainActivity.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")

    def renamedFilesMap = [:]

    // Hacky fix for issue: https://code.google.com/p/android/issues/detail?id=69174.
    // Rename files with '$$' before generating report, and then rename back after
    doFirst {
        new File('app/build/intermediates/classes/debug').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                def oldPath = file.path
                def newPath = oldPath.replace('$$', '$')
                file.renameTo(newPath)
                renamedFilesMap[newPath] = oldPath
            }
        }
    }

    doLast {
        renamedFilesMap.each() {
            newPath, oldPath ->
                new File(newPath).renameTo(oldPath)
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.mockito:mockito-core:2.0.31-beta'
    testCompile 'org.hamcrest:hamcrest-core:1.2.1'
}
